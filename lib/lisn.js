// Generated by CoffeeScript 1.6.2
(function() {
  var Lisn, callbackIsMatch, matchedCallbacks,
    __slice = [].slice;

  Lisn = {};

  Lisn.eventSplitter = /\s/;

  Lisn.on = function(events, callback, context) {
    var event, _base, _i, _len, _ref, _ref1, _ref2, _results;

    if ((_ref = this._events) == null) {
      this._events = {};
    }
    _ref1 = events.split(this.eventSplitter);
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      event = _ref1[_i];
      _results.push(((_ref2 = (_base = this._events)[event]) != null ? _ref2 : _base[event] = []).push({
        callback: callback,
        context: context
      }));
    }
    return _results;
  };

  Lisn.bind = Lisn.on;

  callbackIsMatch = function(obj, callback, context) {
    return (callback === void 0 || (obj.callback._fn && obj.callback._fn === callback) || obj.callback === callback) && (context === void 0 || obj.context === context);
  };

  matchedCallbacks = function(callbacks, callback, context) {
    var obj, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      obj = callbacks[_i];
      if (callbackIsMatch(obj, callback, context)) {
        _results.push(obj);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Lisn.off = function(events, callback, context) {
    var callbacks, event, index, obj, _i, _len, _ref, _results;

    _ref = events.split(this.eventSplitter);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      event = _ref[_i];
      callbacks = this._events[event];
      _results.push((function() {
        var _j, _len1, _ref1, _results1;

        _ref1 = matchedCallbacks(callbacks, callback, context);
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          obj = _ref1[_j];
          if ((index = callbacks.indexOf(obj)) !== -1) {
            _results1.push(callbacks.splice(index, 1));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  Lisn.unbind = Lisn.off;

  Lisn.trigger = function() {
    var args, callbackObj, callbacks, event, eventName, obj, objs, _i, _j, _k, _len, _len1, _len2, _ref, _results;

    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!this._events) {
      return;
    }
    objs = [];
    _ref = [event, 'all'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      eventName = _ref[_i];
      if (callbacks = this._events[eventName]) {
        for (_j = 0, _len1 = callbacks.length; _j < _len1; _j++) {
          callbackObj = callbacks[_j];
          objs.push(callbackObj);
        }
      }
    }
    _results = [];
    for (_k = 0, _len2 = objs.length; _k < _len2; _k++) {
      obj = objs[_k];
      _results.push(obj.callback.apply(obj.context, args));
    }
    return _results;
  };

  Lisn.once = function(events, callback, context) {
    var onceCallback, self;

    self = this;
    onceCallback = function() {
      self.off(events, onceCallback);
      return callback.apply(this, arguments);
    };
    onceCallback._fn = callback;
    return this.on(events, onceCallback, context);
  };

  Lisn.listenTo = function(other, event, callback) {
    var _base, _base1, _ref, _ref1, _ref2;

    if ((_ref = this._listeners) == null) {
      this._listeners = {};
    }
    if ((_ref1 = (_base = this._listeners)[other]) == null) {
      _base[other] = {};
    }
    if ((_ref2 = (_base1 = this._listeners[other])[event]) == null) {
      _base1[event] = [];
    }
    this._listeners[other][event].push({
      event: event,
      callback: callback
    });
    return other.on(event, callback, this);
  };

  Lisn.stopListening = function(other, event, callback) {
    var callbacks, events, _i, _len, _ref, _ref1, _ref2, _results, _results1, _results2;

    if (!this._listeners) {
      return;
    }
    if (other) {
      if (event) {
        if (callback) {
          return other.off(event, callback, this);
        } else {
          _ref = this._listeners[other][event];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            _results.push(this.stopListening(other, event, callback));
          }
          return _results;
        }
      } else {
        _ref1 = this._listeners[other];
        _results1 = [];
        for (event in _ref1) {
          callbacks = _ref1[event];
          _results1.push(this.stopListening(other, event));
        }
        return _results1;
      }
    } else {
      _ref2 = this._listeners;
      _results2 = [];
      for (other in _ref2) {
        events = _ref2[other];
        _results2.push(this.stopListening(other));
      }
      return _results2;
    }
  };

  if (typeof window !== "undefined" && window !== null) {
    window.Lisn = Lisn;
  } else {
    module.exports = Lisn;
  }

}).call(this);
